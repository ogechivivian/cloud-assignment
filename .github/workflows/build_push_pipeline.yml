name: Build and Push Docker Image

# Trigger the workflow on push to main branch
on:
  push:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      #  Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up .NET SDK
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.101'

      # Restore dependencies
      - name: Restore dependencies
        run: dotnet restore

      # Build the project
      - name: Build
        run: dotnet build --configuration Release --no-restore

      #  Run tests
      - name: Test
        run: dotnet test --no-restore --verbosity normal

      #  Publish the project
      - name: Publish
        run: dotnet publish --configuration Release --no-build --output ./publish

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 9. Build and push the Docker image
      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/cloud-assignment:${{ github.sha }}           
            ${{ secrets.DOCKER_USERNAME }}/cloud-assignment:latest

  deploy-to-eks:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      #Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      #Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      #Install kubectl
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      #Update kubeconfig
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

      #Deploy to EKS
      - name: Deploy to EKS
        run: |
          # Update the image in the deployment
          kubectl set image deployment/cloud-assignment-deployment cloud-assignment=${{ secrets.DOCKER_USERNAME }}/cloud-assignment:${{ github.sha }}

          # Wait for the deployment to complete
          kubectl rollout status deployment/cloud-assignment-deployment
